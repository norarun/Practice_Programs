Attribute VB_Name = "Module1"
'================================
'
'file:  test
'Date:  2021/06/04
'用途:  他シートから条件にある情報をまとめる
'
'<<-->>の部分を変更してみてください。
'ver. 1.0
'================================

'定数
Dim SheetName As String      '<<ここに、出力したいシートの名前を入れる>> const SheetName As String = "シート名"でもOK    //この場合、24行目が要らない。
Dim require As Date          '<<ここは、条件、Dateになってるので条件に合わせて変数宣言してください。>>  ここも上を参照。

'変数
Dim flg As Boolean                          'インターバルの実行処理


'***********************
'メイン
'***********************
Sub SampleMain_onClick()
    '<<変数 上記の13 行目を変えたらここも変える>>
    require = Cells(4, 12).Value    '指定シートの分かりやすい所を指定、条件
    SheetName = Cells(5, 12).Value  '指定シートの分かりやすい所を指定、シートの名前
    
    '<<列の数に合わせて増やしたり、減らしたりしてください>>
    Dim A() As String   '配列
    Dim B() As String   '配列
    Dim C() As Date     '配列
    Dim D() As String   '配列
    
    Dim t As String
    
    '初期化、ユーザーメソッド
    Call syokika_onClick
    
    Application.ScreenUpdating = False          '画面処理STOP
    
    'シート1から順番に実行、連想配列
    For Each mySheet In Worksheets
        If Not mySheet.Name = SheetName Then                 'もし、出力指定シートなら飛ばす
            Max_i = Worksheets(mySheet.Name).Range("A" & rows.count).End(xlUp).Row              '選択してるシートの最大 行 数取得
            Worksheets(mySheet.Name).Activate                                                   'ワークシートをアクティブにしている。
            
            
            '挿入
            For i = 1 To (Max_i - 2)
                '<<ここは、宣言した配列に沿って変更を加えてください>>
                If require <= Cells(i + 1, 3).Value Then    '条件文
                    If isArrayEx(A) = -1 Then               '初期化の判定、ユーザーメソッド
                        
                        ReDim Preserve A(0)                     '初期化されていないので初期化
                        ReDim Preserve B(0)                     '初期化されていないので初期化
                        ReDim Preserve C(0)                     '初期化されていないので初期化
                        ReDim Preserve D(0)                     '初期化されていないので初期化
                        
                    Else
                        
                        ReDim Preserve A(UBound(A) + 1)         '配列を増やす
                        ReDim Preserve B(UBound(B) + 1)         '配列を増やす
                        ReDim Preserve C(UBound(C) + 1)         '配列を増やす
                        ReDim Preserve D(UBound(D) + 1)         '配列を増やす
                        
                    End If
                        '<<　　　　　　　　　　　　　　↓　どの列か確認してから設定を行う様に。>>
                        A(UBound(A)) = Cells(i + 1, 1).Value    '値を挿入している
                        B(UBound(B)) = Cells(i + 1, 2).Value    '値を挿入している
                        C(UBound(C)) = Cells(i + 1, 3).Value    '値を挿入している
                        D(UBound(D)) = Cells(i + 1, 4).Value    '値を挿入している
                        
                End If
            Next i
        End If
    Next
    
    '表示
    Application.ScreenUpdating = True       '画面処理開始
    Worksheets(SheetName).Activate
            
    For i = 1 To (UBound(A))
        index = i
        '宣言した配列の数によって、ここを変更してください。
        Cells(index, 1).Value = A(i) '値をCellに挿入している
        Cells(index, 2).Value = B(i) '値をCellに挿入している
        Cells(index, 3).Value = C(i) '値をCellに挿入している
        Cells(index, 4).Value = D(i) '値をCellに挿入している
        
    Next i
            
End Sub
'--------------------------------------------------------------
'
'syokika_onClick
'
'@param     void
'@return    void
'
'最初の実行時に一度だけ実行される。セルをまっさらな状態に戻す。
'
'--------------------------------------------------------------
Sub syokika_onClick()
    '初期化
    Max_i = Worksheets(SheetName).Range("A" & rows.count).End(xlUp).Row              '選択してるシートの最大 行 数取得
    Worksheets(SheetName).Activate
    
    For i = 1 To Max_i
        
        Cells(i, 1).Value = ""      '初期化している
        Cells(i, 2).Value = ""
        Cells(i, 3).Value = ""
        Cells(i, 4).Value = ""
        
    Next i
    
    flg = False
End Sub

'--------------------------------------------------------------
'WEBサイトから引用
'詳しくは：https://zukucode.com/2019/08/vba-array-loop.html
'
'機能：引数が配列か判定し、配列の場合は空かどうかも判定する
'戻り値：判定結果（1:配列 / 0:空の配列 / -1:配列ではない
'--------------------------------------------------------------
Public Function isArrayEx(varArray As Variant) As Long
On Error GoTo ERROR_
    If IsArray(varArray) Then
        isArrayEx = IIf(UBound(varArray) >= 0, 1, 0)
    Else
        isArrayEx = -1
    End If

    Exit Function

ERROR_:
    If Err.Number = 9 Then
        isArrayEx = -1
    Else
        '想定外エラー
    End If
End Function
